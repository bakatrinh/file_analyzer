package file_analyzer;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.JFileChooser;

public class FileAnalyzerController {

	private File _file;
	private FileAnalyzerView _view;
	private String[] _asciiArray;
	private String _outputString = "";

	public FileAnalyzerController(FileAnalyzerView view) {
		_view = view;
		_view.setController(this);
	}

	public File getFile() {
		return _file;
	}

	public void openFile(JFileChooser fileChooser) throws IOException {
		int returnVal = fileChooser.showOpenDialog(_view);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();

			_view.getFileLabel().setText(_file.getName());

			_outputString = convertToBinary();
			_asciiArray = binaryToAscii(_outputString);
			_outputString = asciiArrayToString(_asciiArray);
			// --jervin's-- call function here, set text, append line separation
			_outputString = cipherString(_asciiArray);
			_view.getTextArea().setText("\n-----------------\n");
			_view.getTextArea().setText(_outputString);
		}

	}

	private String convertToBinary() throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(_file.getAbsolutePath()));
		String tempString = new String(encoded, Charset.defaultCharset());

		byte[] bytes = tempString.getBytes();
		StringBuilder binary = new StringBuilder();
		for (byte b : bytes) {
			int val = b;
			for (int i = 0; i < 8; i++) {
				binary.append((val & 128) == 0 ? 0 : 1);
				val <<= 1;
			}
		}
		return binary.toString();
	}

	private String[] binaryToAscii(String s) {
		int arrayLength = (int) Math.ceil(((s.length() / (double)8)));
		String[] result = new String[arrayLength];

		int j = 0;
		int lastIndex = result.length - 1;
		for (int i = 0; i < lastIndex; i++) {
			result[i] = s.substring(j, j + 8);
			j += 8;
		}
		String lastString = s.substring(j);
		StringBuilder sb = new StringBuilder();
		if (lastString.length() < 9) {
			int rest = 9 - lastString.length();
			for(int i = 1; i < rest; i++) {
				sb.append("0");
			}
			sb.append(lastString);
		}
		result[lastIndex] = sb.toString();
		StringBuilder sb2 = new StringBuilder();
		for (int i = 0; i < result.length; i++) {
			int charCode = Integer.parseInt(result[i], 2);
			sb2.append(new Character((char)charCode).toString());
		}
		String stringWithNonAscii = sb2.toString();
		//String stringWithOnlyAscii = stringWithNonAscii.replaceAll("\\P{InBasic_Latin}", "");
		String stringWithOnlyAscii = stringWithNonAscii.replaceAll("[^\\x00-\\x7F]", "");
		return stringWithOnlyAscii.split("(?!^)");
	}
	
	private String asciiArrayToString(String[] asciiArray) {
		StringBuilder sb = new StringBuilder();
		for (String e : asciiArray) {
		    sb.append(e);
		}
		return sb.toString();
	}
	
	// Jervin
	private String cipherString(String [] symbolsArr){
		HashMap<String, Integer> symbolsRatio = new HashMap<>();
		String cipher = "";
		int counter = 0;

		// Key: Character. Value: Occurrence
		for (int i = 0; i < symbolsArr.length; i++){
			if(symbolsRatio.containsKey(symbolsArr[i])){
				counter = symbolsRatio.get(symbolsArr[i]);
				symbolsRatio.put(symbolsArr[i], ++counter);
			}
			else{
				symbolsRatio.put(symbolsArr[i],1);
			}
		}
		
		// Print whole string
		for(int i = 0; i < symbolsArr.length; i++){
			cipher += symbolsArr[i];
		}
		System.out.println(cipher);
		
		for(String s : symbolsRatio.keySet()){
			System.out.println(s + symbolsRatio.get(s));
		}
		
		Set<Integer> ss = new TreeSet<>();
		
		int k = 0;
		// Store number per symbol in each array
		for(String s : symbolsRatio.keySet()){
			ss.add(symbolsRatio.get(s));
		}	
		
		int [] symbolValues = new int[ss.size()];
		for(Integer s : ss){
			symbolValues[k++] = s;
		}
		
		// Sort
		quickSort(symbolValues, 0, symbolValues.length - 1);
		
		// Get key of value in sorted array, print out values
		for(int i = 0; i < symbolValues.length; i++){
			System.out.print(symbolValues[i] + " ");
		}
		// Replace the bottom half values with one letter, get key of the middle + 1 symbol
		// Iterate through whole hashmap to see which symbols match with their values
		
		cipher = "";
		// Get first half of majority values, then replace second half with one value
		for(int i = 0; i < symbolValues.length/2; i++){
			for(String s : symbolsRatio.keySet()){
				int count = symbolValues[i];
				if(symbolsRatio.get(s).equals(symbolValues[i])){
					while(count != 0){
					cipher += s;
					count--;
					}
				}
			}
		}
		String chosenSymbol = "";
		System.out.println(cipher);
		for(int i = symbolValues.length/2; i < symbolsRatio.size(); i++){
			for(String s : symbolsRatio.keySet()){
				if(symbolsRatio.get(s).equals(symbolValues[symbolValues.length/2 + 1])){
					chosenSymbol = s;
				}
			}
			cipher += chosenSymbol;
		}
		
		System.out.println(cipher);
		return cipher;
	}
	
	static void quickSort(int [] arr, int low, int high){
		if(arr == null || arr.length == 0)
			return;
		if(low >= high)
			return;
		
		int middle = low + (high - low) / 2;
		int pivot = arr[middle];
		
		int i = low;
		int j = high;
		
		while (i <= j){
			while(arr[i] > pivot){
				i++;
			}
			while(arr[j] < pivot){
				j--;
			}
			
			if(i <= j){
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--;
			}
		}
		// Sort from greatest to least
		if(low < j)
			quickSort(arr, low, j);
		if(high > i)
			quickSort(arr, i, high);
	}
		
	

	public void saveFile(JFileChooser fileChooser) throws FileNotFoundException {
		int returnVal = fileChooser.showSaveDialog(_view);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();
			String filePath = _file.getAbsolutePath();
			if (!filePath.endsWith(".txt")) {
				_file = new File(filePath + ".txt");
			}
			try (PrintStream out = new PrintStream(new FileOutputStream(_file))) {
				out.print(_outputString);
			}
		}
	}

	public void copyClipboard() {
		StringSelection strSelec = new StringSelection(_outputString);
		Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
		clpbrd.setContents(strSelec, null);
	}
}
