package file_analyzer;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JFileChooser;

public class FileAnalyzerController {

	private File _file;
	private FileAnalyzerView _view;
	private String _outputString = "";

	public FileAnalyzerController(FileAnalyzerView view) {
		_view = view;
		_view.setController(this);
	}

	public File getFile() {
		return _file;
	}

	public void openFile(JFileChooser fileChooser) throws IOException {
		int returnVal = fileChooser.showOpenDialog(_view);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();

			_view.getFileLabel().setText(_file.getName());
			
			_outputString = convertToBinary();
			_view.getTextArea().setText(_outputString);
		}

	}

	public String convertToBinary() throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(_file.getAbsolutePath()));
		String tempString = new String(encoded, Charset.defaultCharset());
		  
		byte[] bytes = tempString.getBytes();
		StringBuilder binary = new StringBuilder();
		for (byte b : bytes) {
			int val = b;
			for (int i = 0; i < 8; i++) {
				binary.append((val & 128) == 0 ? 0 : 1);
				val <<= 1;
			}
		}
		return binary.toString();
	}

	public String binaryToAscii(String s) {
		return "";
	}

	public void saveFile(JFileChooser fileChooser) throws FileNotFoundException {
		int returnVal = fileChooser.showSaveDialog(_view);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();
			String filePath = _file.getAbsolutePath();
			if (!filePath.endsWith(".txt")) {
				_file = new File(filePath + ".txt");
			}
			try (PrintStream out = new PrintStream(new FileOutputStream(_file))) {
				out.print(_outputString);
			}
		}
	}

	public void copyClipboard() {
		StringSelection strSelec = new StringSelection(_outputString);
		Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
		clpbrd.setContents(strSelec, null);
	}
}
